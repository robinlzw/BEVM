// Copyright 2019-2023 ChainX Project Authors. Licensed under GPL-3.0.

//! RPC interface for the transaction payment module.
#![allow(clippy::type_complexity)]
use std::collections::BTreeMap;
use std::convert::TryFrom;
use std::fmt::Display;
use std::str::FromStr;
use std::sync::Arc;

use codec::Codec;
use jsonrpc_derive::rpc;
use serde::{Deserialize, Serialize};

use sp_api::ProvideRuntimeApi;
use sp_blockchain::HeaderBackend;
use sp_runtime::{generic::BlockId, traits::Block as BlockT};

use xp_rpc::{
    hex_decode_error_into_rpc_err, runtime_error_into_rpc_err, trustee_decode_error_into_rpc_err,
    trustee_inexistent_rpc_err, Result, RpcBalance,
};

use xpallet_gateway_common_rpc_runtime_api::trustees::bitcoin::{
    BtcTrusteeIntentionProps, BtcTrusteeSessionInfo,
};
use xpallet_gateway_common_rpc_runtime_api::{
    AssetId, Chain, GenericTrusteeIntentionProps, GenericTrusteeSessionInfo, ScriptInfo,
    Withdrawal, WithdrawalLimit, WithdrawalRecordId, WithdrawalState,
    XGatewayCommonApi as XGatewayCommonRuntimeApi,
};

/// XGatewayCommon RPC methods.
#[rpc]
pub trait XGatewayCommonApi<BlockHash, AccountId, Balance, BlockNumber>
where
    Balance: Display + FromStr,
{
    /// Get bound addrs for an accountid
    #[rpc(name = "xgatewaycommon_boundAddrs")]
    fn bound_addrs(
        &self,
        who: AccountId,
        at: Option<BlockHash>,
    ) -> Result<BTreeMap<Chain, Vec<String>>>;

    /// Get withdrawal limit(minimal_withdrawal&fee) for an AssetId
    #[rpc(name = "xgatewaycommon_withdrawalLimit")]
    fn withdrawal_limit(
        &self,
        asset_id: AssetId,
        at: Option<BlockHash>,
    ) -> Result<WithdrawalLimit<RpcBalance<Balance>>>;

    /// Get a list of withdrawals with withdrawal fee information.
    #[rpc(name = "xgatewaycommon_withdrawalListWithFeeInfo")]
    fn withdrawal_list_with_fee_info(
        &self,
        asset_id: AssetId,
        at: Option<BlockHash>,
    ) -> Result<
        BTreeMap<
            WithdrawalRecordId,
            (
                RpcWithdrawalRecord<AccountId, Balance, BlockNumber>,
                WithdrawalLimit<RpcBalance<Balance>>,
            ),
        >,
    >;

    /// Use the params to verify whether the withdrawal apply is valid. Notice those params is same as the params for call `XGatewayCommon::withdraw(...)`, including checking address is valid or something else. Front-end should use this rpc to check params first, than could create the extrinsic.
    #[rpc(name = "xgatewaycommon_verifyWithdrawal")]
    fn verify_withdrawal(
        &self,
        asset_id: AssetId,
        value: u64,
        addr: String,
        memo: String,
        at: Option<BlockHash>,
    ) -> Result<bool>;

    /// Return the trustee multisig address for all chain.
    #[rpc(name = "xgatewaycommon_trusteeMultisigs")]
    fn multisigs(&self, at: Option<BlockHash>) -> Result<BTreeMap<Chain, AccountId>>;

    /// Return bitcoin trustee registered property info for an account(e.g. registered hot/cold address)
    #[rpc(name = "xgatewaycommon_bitcoinTrusteeProperties")]
    fn btc_trustee_properties(
        &self,
        who: AccountId,
        at: Option<BlockHash>,
    ) -> Result<BtcTrusteeIntentionProps<AccountId>>;

    /// Return bitcoin trustee for current session(e.g. trustee hot/cold address and else)
    #[rpc(name = "xgatewaycommon_bitcoinTrusteeSessionInfo")]
    fn btc_trustee_session_info(
        &self,
        session_number: i32,
        at: Option<BlockHash>,
    ) -> Result<BtcTrusteeSessionInfo<AccountId, BlockNumber>>;

    /// Try to generate bitcoin trustee info for a list of candidates. (this api is used to check the trustee info which would be generated by those candidates)
    #[rpc(name = "xgatewaycommon_bitcoinGenerateTrusteeSessionInfo")]
    fn btc_generate_trustee_session_info(
        &self,
        candidates: Vec<AccountId>,
        at: Option<BlockHash>,
    ) -> Result<BtcTrusteeSessionInfo<AccountId, BlockNumber>>;
}

/// A struct that implements the [`XStakingApi`].
pub struct XGatewayCommon<C, B, AccountId, Balance, BlockNumber> {
    client: Arc<C>,
    _marker: std::marker::PhantomData<(B, AccountId, Balance, BlockNumber)>,
}

impl<C, B, AccountId, Balance, BlockNumber> XGatewayCommon<C, B, AccountId, Balance, BlockNumber> {
    /// Create new `Contracts` with the given reference to the client.
    pub fn new(client: Arc<C>) -> Self {
        Self {
            client,
            _marker: Default::default(),
        }
    }
}

impl<C, Block, AccountId, Balance, BlockNumber>
    XGatewayCommon<C, Block, AccountId, Balance, BlockNumber>
where
    Block: BlockT,
    C: Send + Sync + 'static + ProvideRuntimeApi<Block> + HeaderBackend<Block>,
    C::Api: XGatewayCommonRuntimeApi<Block, AccountId, Balance, BlockNumber>,
    AccountId: Codec + Send + Sync + 'static,
    Balance: Codec + Send + Sync + 'static,
    BlockNumber: Codec + Send + Sync + 'static,
{
    fn generic_trustee_properties(
        &self,
        chain: Chain,
        who: AccountId,
        at: Option<<Block as BlockT>::Hash>,
    ) -> Result<GenericTrusteeIntentionProps<AccountId>> {
        let api = self.client.runtime_api();
        let at = BlockId::hash(at.unwrap_or_else(|| self.client.info().best_hash));

        let result = api
            .trustee_properties(&at, chain, who)
            .map_err(runtime_error_into_rpc_err)?
            .ok_or_else(trustee_inexistent_rpc_err)?;

        Ok(result)
    }

    fn generic_trustee_session_info(
        &self,
        chain: Chain,
        session_number: i32,
        at: Option<<Block as BlockT>::Hash>,
    ) -> Result<GenericTrusteeSessionInfo<AccountId, BlockNumber>> {
        let api = self.client.runtime_api();
        let at = BlockId::hash(at.unwrap_or_else(|| self.client.info().best_hash));

        let result = api
            .trustee_session_info(&at, chain, session_number)
            .map_err(runtime_error_into_rpc_err)?
            .ok_or_else(trustee_inexistent_rpc_err)?;

        Ok(result)
    }

    fn generate_generic_trustee_session_info(
        &self,
        chain: Chain,
        candidates: Vec<AccountId>,
        at: Option<<Block as BlockT>::Hash>,
    ) -> Result<(
        GenericTrusteeSessionInfo<AccountId, BlockNumber>,
        ScriptInfo<AccountId>,
    )> {
        let api = self.client.runtime_api();
        let at = BlockId::hash(at.unwrap_or_else(|| self.client.info().best_hash));

        let result = api
            .generate_trustee_session_info(&at, chain, candidates)
            .map_err(runtime_error_into_rpc_err)?
            .map_err(runtime_error_into_rpc_err)?;

        Ok(result)
    }
}

impl<C, Block, AccountId, Balance, BlockNumber>
    XGatewayCommonApi<<Block as BlockT>::Hash, AccountId, Balance, BlockNumber>
    for XGatewayCommon<C, Block, AccountId, Balance, BlockNumber>
where
    Block: BlockT,
    C: Send + Sync + 'static + ProvideRuntimeApi<Block> + HeaderBackend<Block>,
    C::Api: XGatewayCommonRuntimeApi<Block, AccountId, Balance, BlockNumber>,
    AccountId: Codec + Send + Sync + 'static,
    Balance: Codec + Display + FromStr + Send + Sync + 'static + From<u64>,
    BlockNumber: Codec + Send + Sync + 'static,
{
    fn bound_addrs(
        &self,
        who: AccountId,
        at: Option<<Block as BlockT>::Hash>,
    ) -> Result<BTreeMap<Chain, Vec<String>>> {
        let api = self.client.runtime_api();
        let at = BlockId::hash(at.unwrap_or_else(||
            // If the block hash is not supplied assume the best block.
            self.client.info().best_hash));

        let result = api
            .bound_addrs(&at, who)
            .map_err(runtime_error_into_rpc_err)?;

        let result = result
            .into_iter()
            .filter_map(|(chain, addrs)| {
                let convert: Box<dyn Fn(Vec<u8>) -> String> = match chain {
                    Chain::Bitcoin => {
                        Box::new(|addr: Vec<u8>| String::from_utf8_lossy(&addr).into_owned())
                    }
                    Chain::Ethereum => Box::new(hex::encode),
                    _ => return None,
                };

                Some((chain, addrs.into_iter().map(convert).collect()))
            })
            .collect();

        Ok(result)
    }

    fn withdrawal_limit(
        &self,
        asset_id: AssetId,
        at: Option<<Block as BlockT>::Hash>,
    ) -> Result<WithdrawalLimit<RpcBalance<Balance>>> {
        let api = self.client.runtime_api();
        let at = BlockId::hash(at.unwrap_or_else(||
            // If the block hash is not supplied assume the best block.
            self.client.info().best_hash));

        let result = api
            .withdrawal_limit(&at, asset_id)
            .map_err(runtime_error_into_rpc_err)?
            .map(|src| WithdrawalLimit {
                minimal_withdrawal: src.minimal_withdrawal.into(),
                fee: src.fee.into(),
            })
            .map_err(runtime_error_into_rpc_err)?;
        Ok(result)
    }

    fn withdrawal_list_with_fee_info(
        &self,
        asset_id: AssetId,
        at: Option<<Block as BlockT>::Hash>,
    ) -> Result<
        BTreeMap<
            WithdrawalRecordId,
            (
                RpcWithdrawalRecord<AccountId, Balance, BlockNumber>,
                WithdrawalLimit<RpcBalance<Balance>>,
            ),
        >,
    > {
        let api = self.client.runtime_api();
        let at = BlockId::hash(at.unwrap_or_else(||
            // If the block hash is not supplied assume the best block.
            self.client.info().best_hash));

        let result = api
            .withdrawal_list_with_fee_info(&at, asset_id)
            .map_err(runtime_error_into_rpc_err)?
            .map(|map| {
                map.into_iter()
                    .map(|(id, (record, limit))| {
                        (
                            id,
                            (
                                record.into(),
                                WithdrawalLimit {
                                    minimal_withdrawal: limit.minimal_withdrawal.into(),
                                    fee: limit.fee.into(),
                                },
                            ),
                        )
                    })
                    .collect()
            })
            .map_err(runtime_error_into_rpc_err)?;
        Ok(result)
    }

    fn verify_withdrawal(
        &self,
        asset_id: AssetId,
        value: u64,
        addr: String,
        memo: String,
        at: Option<<Block as BlockT>::Hash>,
    ) -> Result<bool> {
        let value: Balance = Balance::from(value);
        let addr = if let Some(stirp_addr) = addr.strip_prefix("0x") {
            hex::decode(&stirp_addr).map_err(hex_decode_error_into_rpc_err)?
        } else {
            hex::decode(&addr).unwrap_or_else(|_| addr.into_bytes())
        };
        let memo = memo.into_bytes();

        let api = self.client.runtime_api();
        let at = BlockId::hash(at.unwrap_or_else(||
            // If the block hash is not supplied assume the best block.
            self.client.info().best_hash));
        Ok(api
            .verify_withdrawal(&at, asset_id, value, addr, memo.into())
            .map_err(runtime_error_into_rpc_err)?
            .is_ok())
    }

    fn multisigs(&self, at: Option<<Block as BlockT>::Hash>) -> Result<BTreeMap<Chain, AccountId>> {
        let api = self.client.runtime_api();
        let at = BlockId::hash(at.unwrap_or_else(||
                // If the block hash is not supplied assume the best block.
                self.client.info().best_hash));

        let result = api
            .trustee_multisigs(&at)
            .map_err(runtime_error_into_rpc_err)?;

        Ok(result)
    }

    fn btc_trustee_properties(
        &self,
        who: AccountId,
        at: Option<<Block as BlockT>::Hash>,
    ) -> Result<BtcTrusteeIntentionProps<AccountId>> {
        let props = self.generic_trustee_properties(Chain::Bitcoin, who, at)?;
        BtcTrusteeIntentionProps::<_>::try_from(props).map_err(trustee_decode_error_into_rpc_err)
    }

    fn btc_trustee_session_info(
        &self,
        session_number: i32,
        at: Option<<Block as BlockT>::Hash>,
    ) -> Result<BtcTrusteeSessionInfo<AccountId, BlockNumber>> {
        let info = self.generic_trustee_session_info(Chain::Bitcoin, session_number, at)?;
        BtcTrusteeSessionInfo::<_, _>::try_from(info).map_err(trustee_decode_error_into_rpc_err)
    }

    fn btc_generate_trustee_session_info(
        &self,
        candidates: Vec<AccountId>,
        at: Option<<Block as BlockT>::Hash>,
    ) -> Result<BtcTrusteeSessionInfo<AccountId, BlockNumber>> {
        let info = self.generate_generic_trustee_session_info(Chain::Bitcoin, candidates, at)?;
        BtcTrusteeSessionInfo::<_, _>::try_from(info.0).map_err(trustee_decode_error_into_rpc_err)
    }
}

#[derive(PartialEq, Eq, Clone, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct RpcWithdrawalRecord<AccountId, Balance: Display + FromStr, BlockNumber> {
    pub asset_id: AssetId,
    pub applicant: AccountId,
    #[serde(with = "xp_rpc::serde_num_str")]
    pub balance: Balance,
    pub addr: String,
    pub ext: String,
    pub height: BlockNumber,
    pub state: WithdrawalState,
}

impl<AccountId, Balance: Display + FromStr, BlockNumber>
    From<Withdrawal<AccountId, Balance, BlockNumber>>
    for RpcWithdrawalRecord<AccountId, Balance, BlockNumber>
{
    fn from(record: Withdrawal<AccountId, Balance, BlockNumber>) -> Self {
        Self {
            asset_id: record.asset_id,
            applicant: record.applicant,
            balance: record.balance,
            addr: String::from_utf8_lossy(record.addr.as_ref()).into_owned(),
            ext: String::from_utf8_lossy(record.ext.as_ref()).into_owned(),
            height: record.height,
            state: record.state,
        }
    }
}

/*
这段代码定义了 ChainX 区块链的交易支付模块的 RPC 接口.
这个特定的接口专注于 `xpallet_gateway_common` 模块,该模块提供了与网关和资产跨链转移相关的功能.

以下是定义的 RPC 方法及其用途:

1. **bound_addrs**:
   - 功能:获取指定账户在不同链上的绑定地址.
   - 参数:`AccountId`(账户ID),`BlockHash`(区块哈希).
   - 返回值:一个 `BTreeMap`,键是链的类型(`Chain`),值是该账户在该链上的地址列表(`Vec<String>`).

2. **withdrawal_limit**:
   - 功能:获取指定资产的提款限额.
   - 参数:`AssetId`(资产ID),`BlockHash`(区块哈希).
   - 返回值:`WithdrawalLimit<RpcBalance<Balance>>` 结构体,包含提款限额信息.

3. **withdrawal_list_with_fee_info**:
   - 功能:获取带有提款费用信息的提款列表.
   - 参数:`AssetId`(资产ID),`BlockHash`(区块哈希).
   - 返回值:一个 `BTreeMap`,键是提款记录ID(`WithdrawalRecordId`),值是一个元组,
   包含提款信息(`RpcWithdrawalRecord<AccountId, Balance, BlockNumber>`)
   和提款限额(`WithdrawalLimit<RpcBalance<Balance>>`).

4. **verify_withdrawal**:
   - 功能:验证提款申请的有效性,包括资产数量,接收地址和备忘录.
   - 参数:`AssetId`(资产ID),`u64`(提款金额),`String`(接收地址),`String`(备忘录),`BlockHash`(区块哈希).
   - 返回值:一个布尔值,表示提款申请是否有效.

5. **multisigs**:
   - 功能:获取所有受托人的多重签名地址.
   - 参数:`BlockHash`(区块哈希).
   - 返回值:一个 `BTreeMap`,键是链的类型(`Chain`),值是受托人账户ID列表(`AccountId`).

6. **btc_trustee_properties**:
   - 功能:获取指定账户在比特币链上的受托人属性.
   - 参数:`AccountId`(账户ID),`BlockHash`(区块哈希).
   - 返回值:`BtcTrusteeIntentionProps<AccountId>` 结构体,包含受托人属性.

7. **btc_trustee_session_info**:
   - 功能:获取当前会话中比特币链的受托人会话信息.
   - 参数:`i32`(会话编号),`BlockHash`(区块哈希).
   - 返回值:`BtcTrusteeSessionInfo<AccountId, BlockNumber>` 结构体,包含受托人会话信息.

8. **btc_generate_trustee_session_info**:
   - 功能:尝试为一组候选人生成比特币受托人会话信息.
   - 参数:`Vec<AccountId>`(候选人账户ID列表),`BlockHash`(区块哈希).
   - 返回值:`BtcTrusteeSessionInfo<AccountId, BlockNumber>` 结构体,包含受托人会话信息.

这些 RPC 方法为 ChainX 区块链的用户提供了一系列工具,以查询和管理他们的资产跨链转移操作.
通过这些方法,用户可以检查自己的地址绑定情况,提款限额,提款列表,以及验证和生成受托人会话信息.


--------------------------------------------------------------------------
在实际区块链系统中,`XGatewayCommonApi` 接口与 `XAsset` 接口关联在一起,但它们关注的功能点不同.
下面是它们的关联性和区别:

### 关联性:

1. **跨链交互**:
   - 两者都参与到跨链交互中.`XGatewayCommonApi` 专注于跨链交易的管理和执行,
   而 `XAsset` 接口则涉及到资产的创建,转移和查询.

2. **资产处理**:
   - 在跨链转移中,资产(如代币或其他加密货币)是核心对象.`XGatewayCommonApi` 接口
   可能会使用 `XAsset` 接口来检查资产的可用性,转移资产或获取资产的相关信息.

3. **用户交互**:
   - 用户在进行跨链交易时,可能会通过 `XGatewayCommonApi` 接口查询提款限额,验证提款申请等,
   而这些操作可能依赖于 `XAsset` 接口提供的资产状态信息.

### 区别:

1. **功能焦点**:
   - `XGatewayCommonApi` 主要关注于跨链交易的管理和执行,如提款限额查询,提款验证,受托人信息管理等.
   - `XAsset` 接口则更侧重于单个区块链内部的资产管理,如资产的创建,余额查询,资产转移等.

2. **操作范围**:
   - `XGatewayCommonApi` 通常涉及多个区块链之间的操作,需要处理跨链逻辑和信任设置.
   - `XAsset` 接口通常只在单个区块链内部操作,处理的是链内的资产状态和交易.

3. **用户场景**:
   - `XGatewayCommonApi` 通常被用于跨链服务,如交易所的跨链提款和存款,跨链流动性管理等.
   - `XAsset` 接口则更多被用于日常的资产管理,如用户查询自己的资产余额,执行资产转账等.

在实际的区块链系统中,这些接口可能会相互调用或依赖对方的数据和状态,以提供完整的用户体验.
例如,用户在执行跨链提款时,可能需要通过 `XGatewayCommonApi` 来验证提款地址和限额,
同时 `XAsset` 接口可能会用来检查账户的资产余额是否足够.这样,两个接口协同工作,确保了跨链交易的顺利进行.

*/
